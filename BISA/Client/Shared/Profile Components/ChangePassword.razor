@inject IUserService UserService
@attribute [Authorize]
@inject ISnackbar Snackbar

<EditForm Model="User" OnValidSubmit="changePassword">
    <DataAnnotationsValidator />
    <MudCard>
        <MudText Align="Align.Center" Typo="Typo.h5">Change your password</MudText>
        <MudCardContent>
            <MudTextField Label="Current password" @bind-Value="User.CurrentPassword"
                          For="(()=> User.CurrentPassword)" InputType="InputType.Password"></MudTextField>
            <MudTextField Label="New password" @bind-Value="User.NewPassword"
                          For="(()=> User.NewPassword)" InputType="InputType.Password"></MudTextField>
            <MudTextField Label="Confirm password" @bind-Value="User.ValidatedPassword"
                          For="(()=> User.ValidatedPassword)" InputType="InputType.Password"></MudTextField>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" Class="ml-auto">Update</MudButton>
            </MudCardActions>
        </MudCardContent>
    </MudCard>
</EditForm>

@code {
    private UserChangePasswordViewModel User { get; set; } = new();

    private async void changePassword()
    {
        var updatedPassword = await UserService.ChangePassword(User);
        if (updatedPassword.Success)
        {
            Snackbar.Add($"{updatedPassword.Message}", Severity.Success, config => { config.ShowCloseIcon = false; });
        }
        else
        {
            Snackbar.Add($"{updatedPassword.Message}", Severity.Error, config => { config.ShowCloseIcon = false; });

        }
    }
}
