@page "/itemcreateupdate"
@page "/itemcreateupdate/{itemToUpdate:int}"
@inject IItemService ItemService
@inject IMovieService MovieService
@inject IBookService BookService
@inject IEbookService EbookService

<MudText Typo="Typo.h6">@(IsNew ? "Create" : "Update") item</MudText>

@if(IsNew)
{
        <MudSelect T="string" SelectedValuesChanged="(() => InitializeEditContext())" @bind-Value="@mediaType" Label="Media Type" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem Value="@("Book")" />
        <MudSelectItem Value="@("Ebook")" />
        <MudSelectItem Value="@("Movie")"/>
        </MudSelect>
}

@if (dataIsLoaded)
{
    <EditForm OnValidSubmit="@HandleSubmit" EditContext=@EditContext>
        <DataAnnotationsValidator/>

        <MudGrid>
            <MudItem xs=12 Class="mt-3">
                <MudCard>
                    <MudCardContent>

            @if (mediaType.Equals("Movie"))
            {
                <CreateMovieForm movie=movie></CreateMovieForm>
            }

            @if (mediaType.Equals("Book"))
            {
                <CreateBookForm book=book></CreateBookForm>
            }

            @if (mediaType.Equals("Ebook"))
            {
                <CreateEbookForm ebook=ebook></CreateEbookForm>
            }

        <MudSelect T="TagViewModel" ToStringFunc="@(t=> t == null ? null : $"{t.Tag}")" Label="Tags" Required="true" MultiSelection="true" @bind-SelectedValues="@tagsForItem">
            @foreach (var tag in tags)
            {
                <MudSelectItem T="TagViewModel" Value="@tag">@tag.Tag</MudSelectItem>
            }
        </MudSelect>

            @if (IsNew)
             {
                <MudNumericField Label="Add Copies" @bind-Value=itemInventory></MudNumericField>
             }

            </MudCardContent>
            
         <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@(IsNew ? "Create" : "Update")</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>

        <ValidationSummary />
    </EditForm>
}
else { <p>Loading form....</p>}

@if (!String.IsNullOrEmpty(MessageToUser))
{
    <MudText Typo="Typo.h5">@MessageToUser</MudText>
}


@code {
    [Parameter]
    public int itemToUpdate { get; set; }
    private bool dataIsLoaded { get; set; }
    private bool success { get; set; } = false;
    private bool IsNew { get; set; }
    private string? mediaType { get; set; } = "Book";
    private int itemInventory { get; set; }
    private string? MessageToUser { get; set; }
    private MovieViewModel movie = new();
    private EbookViewModel ebook = new();
    private BookViewModel book  = new();
    private List<TagViewModel> tags = new();
    private IEnumerable<TagViewModel> tagsForItem { get; set; } = new HashSet<TagViewModel>();
    private bool createMovie { get; set; } = false;
    private bool createBook { get; set; } = true;
    private bool createEbook { get; set; } = false;
    private EditContext EditContext;

    protected override async Task OnInitializedAsync()
    {
        //EditForm needs initialized model straight away. Template form model will be book.
        EditContext = new EditContext(book);

        //Check if form is used for updating current item, or to create a new one.
        IsNew = itemToUpdate == 0 ? true : false;

        //Check what type of item is going to be updated so the form has correct validation parameters.
        await InitializeEditContext();

        tags = await ItemService.GetTags();

        //When initial data has been processed, show form.
        dataIsLoaded = true;
    }

    private async Task InitializeEditContext()
    {
        if(!IsNew)
        {
            mediaType = await GetItemType(itemToUpdate);
        }

        if(mediaType == "Book")
        {
            if (!IsNew)
            {
                book = await BookService.GetBook(itemToUpdate);
            }
            EditContext = new EditContext(book);
        }

        if(mediaType == "Ebook")
        {
            if (!IsNew)
            {
                ebook = await EbookService.GetEbook(itemToUpdate);
            }
            EditContext = new EditContext(ebook);
        }

        if(mediaType == "Movie")
        {
            if (!IsNew)
            {
                movie = await MovieService.GetMovie(itemToUpdate);
            }
            EditContext = new EditContext(movie);
        }

    }

    private async Task<string> GetItemType(int id)
    {
        var item = await ItemService.GetItem(id);
        return item.Type;
    }

    private async Task HandleSubmit()
    {
        if (IsNew)
        {
            if(mediaType.Equals("Movie"))
            {
                movie.Tags = tagsForItem.ToList();
                movie.ItemInventory = itemInventory;
                MessageToUser = await MovieService.CreateMovie(movie);
            }
            if (mediaType.Equals("Book"))
            {
                book.Tags = tagsForItem.ToList();
                book.ItemInventory = itemInventory;
                MessageToUser = await BookService.CreateBook(book);
            }
            if (mediaType.Equals("Ebook"))
            {
                ebook.Tags = tagsForItem.ToList();
                ebook.ItemInventory = itemInventory;
                MessageToUser = await EbookService.CreateEbook(ebook);
            }
        }

        if (!IsNew)
        {
            if(mediaType.Equals("Movie"))
            {
                movie.Tags = tagsForItem.ToList();
                MessageToUser = await MovieService.UpdateMovie(movie);
            }
            if (mediaType.Equals("Book"))
            {
                book.Tags = tagsForItem.ToList();
                MessageToUser = await BookService.UpdateBook(book);
            }
            if (mediaType.Equals("Ebook"))
            {
                ebook.Tags = tagsForItem.ToList();
                MessageToUser = await EbookService.UpdateEbook(ebook);
            }
        }

    }

}
