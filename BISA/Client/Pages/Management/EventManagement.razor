@page "/eventmanagement/{id}"
@attribute [Authorize(Roles = "Admin, Staff")]
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<EditForm Model="SingleEvent" OnValidSubmit="UpdateEvent">
    <MudCard>
        <MudText Align="Align.Center" Typo="Typo.h3">Update event @SingleEvent.Id</MudText>
        <MudCardContent>
            <MudDatePicker Label="Date" @bind-Date="EventDate"/>
            <MudTimePicker Label="Time" @bind-Time="EventTime"/>
            <MudTextField Label="Organizer" @bind-Value="SingleEvent.Organizer"
                          For="(() => SingleEvent.Organizer)"></MudTextField>
            <MudTextField Label="Subject" @bind-Value="SingleEvent.Subject"
                          For="(() => SingleEvent.Subject)"></MudTextField>
            <MudTextField Label="Location" @bind-Value="SingleEvent.Location"
                          For="(() => SingleEvent.Location)"></MudTextField>
            <MudTextField Label="Description" @bind-Value="SingleEvent.Description"
                          For="(() => SingleEvent.Description)"></MudTextField>
            <MudSelect Label="Type" @bind-Value="EventTypeId">
                @foreach (var type in EventTypes)
                {
                    <MudSelectItem T="int" Value="type.Id">@type.Type</MudSelectItem>
                }
            </MudSelect>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" Class="ml-auto">Update</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>
<MudIconButton OnClick="DeleteEvent" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>

@code {
    [Parameter]
    public string Id { get; set; }
    private DateTime? EventDate { get; set; }
    private TimeSpan? EventTime { get; set; }
    private List<EventTypeViewModel> EventTypes { get; set; } = new();
    private EventViewModel SingleEvent { get; set; } = new();
    private int EventTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var eventTypesResponse = await EventService.GetEventTypes();
        if (eventTypesResponse.Success) EventTypes = eventTypesResponse.Data;
        var singleEventResponse = await EventService.GetEvent(Int32.Parse(Id));
        if (singleEventResponse.Success) SingleEvent = singleEventResponse.Data;
        EventTypeId = SingleEvent.Type.Id;
        EventDate = SingleEvent.Date;
        EventTime = SingleEvent.Date.TimeOfDay;
    }

    private async Task UpdateEvent()
    {
        SingleEvent.Type.Id = EventTypeId;
        SingleEvent.Date = EventDate.GetValueOrDefault().Date.Add(EventTime.GetValueOrDefault());
        var updateEvent = await EventService.UpdateEvent(SingleEvent);
        if (updateEvent.Success)
        {
            SingleEvent = updateEvent.Data;
            Snackbar.Add($"Event updated", Severity.Success);
        }
        StateHasChanged();
    }

    private async Task DeleteEvent()
    {
        var deleteResult = await EventService.DeleteEvent(Int32.Parse(Id));
        if (deleteResult.Success) NavigationManager.NavigateTo("/eventsmanagement");
        else Snackbar.Add($"{deleteResult.Message}", Severity.Error);
    }
}
