@page "/eventcreate"
@attribute [Authorize(Roles = "Admin, Staff")]
@inject IEventService EventService
@inject ISnackbar Snackbar

<EditForm Model="EventToValidate" OnValidSubmit="CreateEvent">
    <DataAnnotationsValidator />
    <MudCard>
        <MudText Align="Align.Center" Typo="Typo.h3">Create event</MudText>
        <MudCardContent>
            <MudDatePicker Label="Date" @bind-Date="EventDate" Required="true"/>
            <MudTimePicker Label="Time" @bind-Time="EventTime" Required="true"/>
            <MudTextField Label="Organizer" @bind-Value="EventToValidate.Organizer"
                          For="(() => EventToValidate.Organizer)"></MudTextField>
            <MudTextField Label="Subject" @bind-Value="EventToValidate.Subject"
                          For="(() => EventToValidate.Subject)"></MudTextField>
            <MudTextField Label="Location" @bind-Value="EventToValidate.Location"
                          For="(() => EventToValidate.Location)"></MudTextField>
            <MudTextField Label="Description" @bind-Value="EventToValidate.Description"
                          For="(() => EventToValidate.Description)"></MudTextField>
            <MudSelect Label="Type" @bind-Value="EventToValidate.EventTypeId">
                @foreach (var type in EventTypes)
                {
                    <MudSelectItem T="int" Value="type.Id">@type.Type</MudSelectItem>
                }
            </MudSelect>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" Class="ml-auto">Create</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private DateTime? EventDate { get; set; }
    private TimeSpan? EventTime { get; set; }
    private List<EventTypeViewModel> EventTypes { get; set; } = new();
    private EventCreateViewModel EventToValidate { get; set; } = new();
    private EventViewModel SingleEvent { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var serviceResponse = await EventService.GetEventTypes();
        if (serviceResponse.Success) EventTypes = serviceResponse.Data;
        EventToValidate.EventTypeId = 1; // default eventtype
        StateHasChanged();
    }

    private async Task CreateEvent()
    {
        var eventType = EventTypes.Find(e => e.Id == EventToValidate.EventTypeId);
        EventViewModel eventToCreate = new EventViewModel
        {
            Date = EventDate.GetValueOrDefault().Date.Add(EventTime.GetValueOrDefault()),
            Description = EventToValidate.Description,
            Location = EventToValidate.Location,
            Organizer = EventToValidate.Organizer,
            Subject = EventToValidate.Subject,
            Type = new EventTypeViewModel
            {
                Id = eventType.Id,
                Capacity = eventType.Capacity,
                Description = eventType.Description,
                Image = eventType.Image,
                Type = eventType.Type
            }
        };

        var createEventResult = await EventService.CreateEvent(eventToCreate);
        if (createEventResult.Success == false)
        {
            Snackbar.Add($"{@createEventResult.Message}", Severity.Error);
        }
        else if (createEventResult.Success)
        {
            SingleEvent = createEventResult.Data;
            Snackbar.Add("Event created", Severity.Success);
        }
        StateHasChanged();
    }
}
