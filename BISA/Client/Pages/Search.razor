@page "/search"
@page "/search/{atpageloadsearch}"
@using Append.Blazor.Printing
@inject IPrintingService PrintingService
@inject ISearchService SearchService
@inject NavigationManager NavigationManager

<EditForm Model="@SearchMessage" OnSubmit="SearchBy">
    <MudTextField T="string" @bind-Value="SearchMessage.UserSearch" Required="true" RequiredError="Search is required!" />

    <div class="d-flex">
        <MudRadioGroup T="string" Required="true" @bind-SelectedOption="SearchByProperty">
            <MudRadio Option="@("title")">Search by title</MudRadio>
            <MudRadio Option="@("tags")">Search by tags</MudRadio>
            <MudRadio Option="@("all")">All</MudRadio>
        </MudRadioGroup>
    </div>
    <div class="d-flex align-center justify-space-between mt-6">
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search</MudButton>
    </div>
</EditForm>


<SearchResults Items=ItemsSearchedFor></SearchResults>



@code {
    [Parameter]
    public string? AtPageLoadSearch { get; set; }
    public SearchDTO SearchMessage { get; set; } = new();
    private List<ItemViewModel> ItemsSearchedFor { get; set; } = new();
    private string SearchByProperty { get; set; } = "all";

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(AtPageLoadSearch))
        {
            SearchMessage.UserSearch = AtPageLoadSearch;
            await SearchBy();
        }
    }

    private async Task SearchBy()
    {
        if (SearchByProperty.Equals("title"))
        {
            ItemsSearchedFor = await SearchService.GetByTitle(SearchMessage);
        }
        else if (SearchByProperty.Equals("tags"))
        {
            ItemsSearchedFor = await SearchService.GetByTags(SearchMessage);
        }
        else if (SearchByProperty.Equals("all"))
        {
            ItemsSearchedFor = await SearchService.GetByAll(SearchMessage);
        }
    }

}
