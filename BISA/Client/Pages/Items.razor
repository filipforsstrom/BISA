@page "/items/{id}"
@inject IItemService ItemService
@inject IReservationsService ReservationsService
@inject IBookService BookService
@inject IEbookService EbookService
@inject IMovieService MovieService
@inject ILoanService LoanService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<h3>Items</h3>
@if (Item != null)
{
    @if (Item.Type == "Book")
    {

        <MudImage Alt="" Width="300" Height="220" Src="assets/book.jpg"></MudImage>
        <MudGrid>
            <MudItem xs=12>
                <MudCard >
                    <MudCardContent>

                        <MudText Typo="Typo.h6"><u>Title</u></MudText>
                    <MudText Typo="Typo.body2">@Book.Title</MudText>

                    <MudText Typo="Typo.h6"><u>Description</u></MudText>
                    <MudText Typo="Typo.body2">@Book.Description</MudText>

                    <MudText Typo="Typo.h6"><u>Author</u></MudText>
                    <MudLink href="@($"search/{Book.Creator}")" Typo="Typo.body2">@Book.Creator</MudLink>

                    <MudText Typo="Typo.h6"><u>Publisher</u></MudText>
                    <MudText Typo="Typo.body2">@Book.Publisher</MudText>

                    <MudText Typo="Typo.h6"><u>Date</u></MudText>
                    <MudText Typo="Typo.body2">@Book.Date</MudText>

                    <MudText Typo="Typo.h6"><u>Language</u></MudText>
                    <MudText Typo="Typo.body2">@Book.Language</MudText>

                    <MudText Typo="Typo.h6"><u>ISBN</u></MudText>
                    <MudText Typo="Typo.body2">@Book.ISBN</MudText>

                    <MudText Typo="Typo.h6"><u>Media type</u></MudText>
                    <MudText Typo="Typo.body2">@Item.Type</MudText>

                    <MudText Typo="Typo.h6"><u>Tags</u></MudText>
                        @foreach (var tag in Book.Tags)
                        {
                            <MudLink Class="ml-2" href="@($"search/{tag.Tag}")" Typo="Typo.body2">@tag.Tag </MudLink>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>


            </MudGrid>
            
        
    }
    else if (Item.Type == "Ebook")
    {
        <MudImage Alt="Ebook img" Width="332" Height="250" Src="assets/ebook.jpg"></MudImage>

        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6"><u>Title</u></MudText>
                <MudText Typo="Typo.body2">@Ebook.Title</MudText>

                <MudText Typo="Typo.h6"><u>Description</u></MudText>
                <MudText Typo="Typo.body2">@Ebook.Description</MudText>

                <MudText Typo="Typo.h6"><u>Author</u></MudText>
                <MudLink href="@($"search/{Ebook.Creator}")" Typo="Typo.body2">@Ebook.Creator</MudLink>

                <MudText Typo="Typo.h6"><u>Publisher</u></MudText>
                    <MudText Typo="Typo.body2">@Ebook.Publisher</MudText>

                    <MudText Typo="Typo.h6"><u>Date</u></MudText>
                    <MudText Typo="Typo.body2">@Ebook.Date</MudText>

                    <MudText Typo="Typo.h6"><u>Language</u></MudText>
                    <MudText Typo="Typo.body2">@Ebook.Language</MudText>

                <MudText Typo="Typo.h6"><u>URL</u></MudText>
                <MudLink Class="ml-2" href="@Ebook.Url" Typo="Typo.body2">@Ebook.Title</MudLink>

                <MudText Typo="Typo.h6"><u>Media type</u></MudText>
                <MudText Typo="Typo.body2">@Item.Type</MudText>

                <MudText Typo="Typo.h6"><u>Tags</u></MudText>
                @foreach (var tag in Ebook.Tags)
                {
                    <MudLink Class="ml-2" href="@($"search/{tag.Tag}")" Typo="Typo.body2">@tag.Tag </MudLink>
                }
            </MudCardContent>
        </MudCard>
    }
    else if (Item.Type == "Movie")
    {
        <MudImage Alt="" Width="332" Height="250" Src="assets/movie.jpg"></MudImage>

        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6"><u>Title</u></MudText>
                <MudText Typo="Typo.body2">@Movie.Title</MudText>

                <MudText Typo="Typo.h6"><u>Description</u></MudText>
                <MudText Typo="Typo.body2">@Movie.Description</MudText>

                <MudText  Typo="Typo.h6"><u>Director</u></MudText>
                <MudLink href="@($"search/{Movie.Creator}")" Typo="Typo.body2">@Movie.Creator</MudLink>

                <MudText Typo="Typo.h6"><u>Publisher</u></MudText>
                    <MudText Typo="Typo.body2">@Movie.Publisher</MudText>

                    <MudText Typo="Typo.h6"><u>Date</u></MudText>
                    <MudText Typo="Typo.body2">@Movie.Date</MudText>

                    <MudText Typo="Typo.h6"><u>Language</u></MudText>
                    <MudText Typo="Typo.body2">@Movie.Language</MudText>

                <MudText Typo="Typo.h6"><u>Runtime</u></MudText>
                <MudText Typo="Typo.body2">@Movie.RuntimeInMinutes min</MudText>

                <MudText Typo="Typo.h6"><u>Media type</u></MudText>
                <MudText Typo="Typo.body2">@Item.Type</MudText>

                <MudText Typo="Typo.h6"><u>Tags</u></MudText>
                @foreach (var tag in Movie.Tags)
                {
                    <MudLink Class="ml-2" href="@($"search/{tag.Tag}")" Typo="Typo.body2">@tag.Tag </MudLink>
                }
            </MudCardContent>
        </MudCard>
    }
    <AuthorizeView>
        <Authorized>
            @if (Available)
            {
                <MudButton OnClick="() => AddToLoans(Item)" Disabled="@NoStock" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Loan</MudButton>
            }
            else
            {
                <MudButton OnClick="@((e) => Reserve(Item))" Disabled="@NoStock" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Reserve</MudButton>
            }
            @if (NoStock)
            {
                <MudText>This @Item.Type isn't available</MudText>
            }
        </Authorized>

        <NotAuthorized>
            <MudText Typo="Typo.body2">
                Please
                <MudLink href="@("login")" Typo="Typo.body2">login</MudLink>
                if you want to loan this @Item.Type
            </MudText>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private ItemViewModel Item { get; set; } = new();
    private BookViewModel Book { get; set; } = new();
    private EbookViewModel Ebook { get; set; } = new();
    private MovieViewModel Movie { get; set; } = new();
    private bool Available { get; set; } = true;
    private bool NoStock { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Item = await ItemService.GetItem(Int32.Parse(Id));
        if (Item == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Available = CheckIfAvailable(Item.Inventory);
            if (Item.Inventory.Count() == 0)
            {
                NoStock = true;
            }
            if (Item.Type == "Book")
            {
                var bookResponse = await BookService.GetBook(Item.Id);
                Book = bookResponse.Data;
            }
            else if (Item.Type == "Ebook")
            {
                var ebookResponse = await EbookService.GetEbook(Item.Id);
                Ebook = ebookResponse.Data;
            }
            else if (Item.Type == "Movie")
            {
                var movieResponse = await MovieService.GetMovie(Item.Id);
                Movie = movieResponse.Data;
            }
        }
    }

    private async Task AddToLoans(ItemViewModel item)
    {
        var loans = await LocalStorage.GetItemAsync<List<CheckoutDTO>>("checkout");
        if (loans != null)
        {
            if (loans.Any(l => l.ItemId == item.Id))
            {
                Snackbar.Add($"{item.Title} is already added to checkout", Severity.Error, config => { config.ShowCloseIcon = false; });
            }
            else
            {
                loans.Add(new CheckoutDTO
                {
                    ItemId = item.Id,
                    Title = item.Title,
                    Author = item.Creator,
                    Description = item.Description
                });
                await LocalStorage.SetItemAsync("checkout", loans);
            }
        }
        else
        {
            var newCheckout = new List<CheckoutDTO>();
            newCheckout.Add(new CheckoutDTO
                {
                    ItemId = item.Id,
                    Author = item.Creator,
                    Title = item.Title,
                    Description = item.Description
                });
            await LocalStorage.SetItemAsync("checkout", newCheckout);
        }
        NavigationManager.NavigateTo("checkout");
    }

    private async Task Reserve(ItemViewModel item)
    {
        var parameters = new DialogParameters { ["Item"] = item };

        var dialog = DialogService.Show<ReserveDialog>("Reserve", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {

        }
    }

    private bool CheckIfAvailable(List<ItemInventoryViewModel> inventory)
    {
        var inventoryTrue = inventory.Where(i => i.Available == true).ToList();
        if (inventoryTrue.Any()) return true;
        return false;
    }
}