@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<AuthorizeView>
    <Authorized>

    </Authorized>
</AuthorizeView>
<EditForm Model="RegistratedUser" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />
    
    <MudCard >
        <MudText Align="Align.Center" Typo="Typo.h3">Register</MudText>
        <MudCardContent>
        <MudTextField Label="First Name" @bind-Value="RegistratedUser.FirstName"
                      For="(()=> RegistratedUser.FirstName)"></MudTextField>
        <MudTextField Label="Last Name" @bind-Value="RegistratedUser.LastName"
                      For="(()=> RegistratedUser.LastName)"></MudTextField>
        <MudTextField Label="User Name" @bind-Value="RegistratedUser.Username"
                      For="(()=> RegistratedUser.Username)"></MudTextField>
        <MudTextField Label="Email" @bind-Value="RegistratedUser.Email"
                      For="(()=> RegistratedUser.Email)"></MudTextField>
        <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3" @bind-Value="RegistratedUser.Password"
                      For="(()=> RegistratedUser.Password)" InputType="InputType.Password"></MudTextField>
        <MudTextField Label="Password" HelperText="Repeat your password" Class="mt-3" @bind-Value="RegistratedUser.ValidatePassword"
                      For="(()=> RegistratedUser.ValidatePassword)"InputType="InputType.Password"></MudTextField>
        </MudCardContent>
        <MudCardActions>
                <MudLink Href="#" Typo="Typo.body2" Class="ml-2">Home page</MudLink>
                <MudButton ButtonType="ButtonType.Submit"  Variant="Variant.Filled" Color="Color.Info" Class="ml-auto">Register</MudButton>
        </MudCardActions>
    </MudCard>
    
</EditForm>

@code {
    private UserRegisterViewModel RegistratedUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task RegisterUser()
    {
        var response = await AuthService.Register(RegistratedUser);

        if(response.Success)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Snackbar.Add($"Error: {response.Message}", Severity.Error, config => { config.ShowCloseIcon = false; });
        }
    }
}
